*** Settings ***

Library   OperatingSystem
Library   Collections

Resource   variables.txt

*** Keywords ***

Execute and Check Success   [Arguments]   ${cmd}
  ${rc}   ${output}=   Run and Return RC And Output   ${cmd}
  Should Be Equal As Integers   ${rc}   0   ${output}   False
  [Return]   ${output}

Execute and Check Failure   [Arguments]   ${cmd}
  ${rc}   ${output}=   Run and Return RC And Output   ${cmd}
  Should Not Be Equal As Integers   ${rc}   0   ${output}
  [Return]   ${output}

Use p12 certificate   [Arguments]   ${cert}
  File Should Exist   ${certsDir}/${cert}.p12
  Stop using certificate
  Execute and Check Success   cp ${certsDir}/${cert}.p12 %{HOME}/.globus/usercred.p12
  Execute and Check Success   chmod 600 %{HOME}/.globus/usercred.p12

Use certificate   [Arguments]   ${cert}
  File Should Exist   ${certsDir}/${cert}.cert.pem
  File Should Exist   ${certsDir}/${cert}.key.pem
  Stop using certificate
  Execute and Check Success   cp ${certsDir}/${cert}.cert.pem %{HOME}/.globus/usercert.pem
  Execute and Check Success   cp ${certsDir}/${cert}.key.pem %{HOME}/.globus/userkey.pem
  Execute and Check Success   chmod 400 %{HOME}/.globus/userkey.pem

Get named certificate subject   [Arguments]   ${cert}
  File Should Exist   ${certsDir}/${cert}.cert.pem
  ${subject}  Get certificate subject   ${certsDir}/${cert}.cert.pem
  [Return]   ${subject}

Get named certificate issuer   [Arguments]   ${cert}
  File Should Exist   ${certsDir}/${cert}.cert.pem
  ${subject}  Get certificate issuer   ${certsDir}/${cert}.cert.pem
  [Return]   ${subject}

Get certificate subject   [Arguments]   ${certFile}
  File Should Exist   ${certFile}
  ${subject}   Execute and Check Success   openssl x509 -in ${certFile} -noout -subject | sed "s#subject= ##"
  [Return]   ${subject}

Get certificate issuer   [Arguments]   ${certFile}
  File Should Exist   ${certFile}
  ${issuer}   Execute and Check Success   openssl x509 -in ${certFile} -noout -issuer | sed "s#issuer= ##"
  [Return]   ${issuer}

Create plain proxy
  Execute and Check Success   echo ${privateKeyPassword} | voms-proxy-init -pwstdin

Use admin certificate   [Arguments]  ${adminCert}=VO_Admin  
  Use certificate   ${adminCert}
  Create plain proxy

Stop using certificate
  Run  rm %{HOME}/.globus/usercert.pem
  Run  rm -f %{HOME}/.globus/userkey.pem
  Run  rm -f %{HOME}/.globus/usercred.p12
  Run  voms-proxy-destroy

Create user   [Arguments]   ${cert}  ${vo}=${vo1} 
  File Should Exist   ${certsDir}/${cert}.cert.pem
  Use admin certificate
  Execute and Check Success   voms-admin --vo ${vo} --host ${vo1_host} create-user ${certsDir}/${cert}.cert.pem
  Stop using certificate

Create user and check failure  [Arguments]   ${cert}  ${vo}=${vo1}
  File Should Exist   ${certsDir}/${cert}.cert.pem
  Use admin certificate
  ${output}   Execute and Check Failure   voms-admin --vo ${vo} --host ${vo1_host} create-user ${certsDir}/${cert}.cert.pem
  Stop using certificate
  [Return]   ${output}

Create user without certificate  [Arguments]   ${subject}  ${issuer}  ${vo}=${vo1}
  Use admin certificate
  ${cn}  Execute and Check Success  echo ${subject}|grep -Eo CN=.*|tr = '\n'|tail -1
  Execute and Check Success   voms-admin --vo ${vo} --host ${vo1_host} --nousercert create-user ${subject} '${issuer}' ${cn} ''
  Stop using certificate

Create user without certificate and check failure  [Arguments]   ${subject}  ${issuer}  ${vo}=${vo1}
  Use admin certificate
  ${cn}  Execute and Check Success  echo ${subject}|grep -Eo CN=.*|tr = '\n'|tail -1
  ${output}   Execute and Check Failure   voms-admin --vo ${vo} --host ${vo1_host} --nousercert create-user ${subject} '${issuer}' ${cn} ''
  Stop using certificate
  [Return]   ${output}

Delete user   [Arguments]  ${cert}   ${vo}=${vo1}
  File Should Exist   ${certsDir}/${cert}.cert.pem
  Use admin certificate 
  Execute and Check Success   voms-admin --vo ${vo} --host ${vo1_host} delete-user ${certsDir}/${cert}.cert.pem
  Stop using certificate

Delete user without certificate  [Arguments]  ${subject}  ${issuer}  ${vo}=${vo1}
  Use admin certificate
  Execute and Check Success   voms-admin --vo ${vo} --host ${vo1_host} --nousercert delete-user ${subject} '${issuer}'
  Stop using certificate

Create group   [Arguments]   ${groupName}   ${vo}=${vo1}
  Use admin certificate
  Execute and Check Success   voms-admin --vo ${vo} --host ${vo1_host} create-group /${vo}/${groupName}
  Stop using certificate

Create group and check failure  [Arguments]   ${groupName}   ${vo}=${vo1}
  Use admin certificate
  ${output}   Execute and Check Failure   voms-admin --vo ${vo} --host ${vo1_host} create-group /${vo}/${groupName}
  Stop using certificate
  [Return]   ${output}

Delete group   [Arguments]   ${groupName}   ${vo}=${vo1}
  Use admin certificate
  Execute and Check Success   voms-admin --vo ${vo} --host ${vo1_host} delete-group /${vo}/${groupName}
  Stop using certificate

Create role   [Arguments]   ${roleName}   ${vo}=${vo1}
  Use admin certificate
  Execute and Check Success   voms-admin --vo ${vo} --host ${vo1_host} create-role ${roleName}
  Stop using certificate

Create role and check failure  [Arguments]   ${roleName}   ${vo}=${vo1}
  Use admin certificate
  ${output}   Execute and Check Failure   voms-admin --vo ${vo} --host ${vo1_host} create-role ${roleName}
  Stop using certificate
  [Return]   ${output}

Delete role   [Arguments]   ${roleName}   ${vo}=${vo1}
  Use admin certificate
  Execute and Check Success   voms-admin --vo ${vo} --host ${vo1_host} delete-role ${roleName}
  Stop using certificate

Add user to group    [Arguments]   ${cert}   ${groupName}   ${vo}=${vo1}
  File Should Exist   ${certsDir}/${cert}.cert.pem
  Use admin certificate
  Execute and Check Success   voms-admin --vo ${vo} --host ${vo1_host} add-member /${vo}/${groupName} ${certsDir}/${cert}.cert.pem
  Stop using certificate

Remove user from group   [Arguments]   ${cert}   ${groupName}   ${vo}=${vo1}
  File Should Exist   ${certsDir}/${cert}.cert.pem
  Use admin certificate
  Execute and Check Success   voms-admin --vo ${vo} --host ${vo1_host} remove-member /${vo}/${groupName} ${certsDir}/${cert}.cert.pem
  Stop using certificate

Add user to group and check failure  [Arguments]   ${cert}  ${group}  ${vo}=${vo1}  ${host}=${vo1_host}
  File Should Exist   ${certsDir}/${cert}.cert.pem
  Use admin certificate
  ${subject}  Get certificate subject  ${certsDir}/${cert}.cert.pem
  ${issuer}   Get certificate issuer  ${certsDir}/${cert}.cert.pem
  ${output}   Execute and Check Failure   voms-admin --vo=${vo} --host ${host} --nousercert add-member "/"${vo}"/"${group} "${subject}" "${issuer}"
  Stop using certificate
  [Return]   ${output}

Assign role and check failure   [Arguments]   ${cert}   ${groupName}   ${roleName}  ${vo}=${vo1}
  File Should Exist   ${certsDir}/${cert}.cert.pem
  Use admin certificate
  ${output}   Execute and Check Failure   voms-admin --vo ${vo} --host ${vo1_host} assign-role /${vo}/${groupName} ${roleName} ${certsDir}/${cert}.cert.pem
  Stop using certificate
  [Return]   ${output}

Set ACL for group and check failure   [Arguments]   ${cert}   ${groupName}  ${permission}  ${propagation}  ${vo}=${vo1}
  File Should Exist   ${certsDir}/${cert}.cert.pem
  Use admin certificate
  ${output}   Execute and Check Failure   voms-admin --vo ${vo} --host ${vo1_host} add-ACL-entry /${vo}/${groupName} ${certsDir}/${cert}.cert.pem ${permission} ${propagation}
  Stop using certificate
  [Return]   ${output}

Set default ACL for group and check failure   [Arguments]   ${cert}   ${groupName}  ${permission}  ${vo}=${vo1}
  File Should Exist   ${certsDir}/${cert}.cert.pem
  Use admin certificate
  ${output}   Execute and Check Failure   voms-admin --vo ${vo} --host ${vo1_host} add-default-ACL-entry /${vo}/${groupName} ${certsDir}/${cert}.cert.pem ${permission}
  Stop using certificate
  [Return]   ${output}

Set ACL for a role and check failure   [Arguments]   ${cert}   ${roleName}  ${permission}  ${propagation}  ${vo}=${vo1}
  File Should Exist   ${certsDir}/${cert}.cert.pem
  Use admin certificate
  ${output}   Execute and Check Failure   voms-admin --vo ${vo} --host ${vo1_host} add-ACL-entry /${vo}/Role=${roleName} ${certsDir}/${cert}.cert.pem ${permission} ${propagation}
  Stop using certificate
  [Return]   ${output}

Set ACL for a group with role and check failure   [Arguments]   ${cert}  ${groupName}  ${roleName}  ${permission}  ${propagation}  ${vo}=${vo1}
  File Should Exist   ${certsDir}/${cert}.cert.pem
  Use admin certificate
  ${output}   Execute and Check Failure   voms-admin --vo ${vo} --host ${vo1_host} add-ACL-entry /${vo}/${groupName}/Role=${roleName} ${certsDir}/${cert}.cert.pem ${permission} ${propagation}
  Stop using certificate
  [Return]   ${output}

Set ACL permission for a user in a group with role  [Arguments]   ${cert}  ${groupName}  ${roleName}  ${permission}  ${propagation}  ${vo}=${vo1}
  File Should Exist   ${certsDir}/${cert}.cert.pem
  Use admin certificate
  Execute and Check Success  voms-admin --vo ${vo} --host ${vo1_host} add-ACL-entry /${vo}/${groupName}/Role=${roleName} ${certsDir}/${cert}.cert.pem ${permission} ${propagation}
  Stop using certificate

Set ACL permission for a user in a group   [Arguments]   ${cert}  ${groupName}  ${permission}  ${propagation}  ${vo}=${vo1}
  File Should Exist   ${certsDir}/${cert}.cert.pem
  Use admin certificate
  Execute and Check Success  voms-admin --vo ${vo} --host ${vo1_host} add-ACL-entry /${vo}/${groupName} ${certsDir}/${cert}.cert.pem ${permission} ${propagation} 
  Stop using certificate

Set default ACL for group using subject/issuer   [Arguments]   ${subject}  ${issuer}  ${groupName}  ${permission}  ${vo}=${vo1}
  Use admin certificate
  ${output}   Execute and Check Success   voms-admin --vo ${vo} --host ${vo1_host} --nousercert add-default-ACL-entry /${vo}/${groupName} ${subject} ${issuer} ${permission}
  Stop using certificate


Set default ACL for group   [Arguments]   ${cert}  ${groupName}  ${permission}  ${vo}=${vo1}
  File Should Exist   ${certsDir}/${cert}.cert.pem
  Use admin certificate
  ${output}   Execute and Check Success   voms-admin --vo ${vo} --host ${vo1_host} add-default-ACL-entry /${vo}/${groupName} ${certsDir}/${cert}.cert.pem ${permission}
  Stop using certificate

Get ACL permission for a group  [Arguments]   ${groupName}   ${vo}=${vo1}
  Use admin certificate
  ${output}   Execute and Check Success  voms-admin --vo ${vo} --host ${vo1_host} get-ACL /${vo}/${groupName}
  Stop using certificate
  [Return]   ${output}

Get default ACL permission for a group  [Arguments]   ${groupName}   ${vo}=${vo1}
  Use admin certificate
  ${output}   Execute and Check Success  voms-admin --vo ${vo} --host ${vo1_host} get-default-ACL /${vo}/${groupName}
  Stop using certificate
  [Return]   ${output}

Get ACL permission for a group with role  [Arguments]   ${groupName}   ${roleName}  ${vo}=${vo1}
  Use admin certificate
  ${output}   Execute and Check Success  voms-admin --vo ${vo} --host ${vo1_host} get-ACL /${vo}/${groupName}/Role=${roleName}
  Stop using certificate
  [Return]   ${output}

Get comma separated list  [Arguments]   @{params}
  ${optionsList}  Set Variable  ${EMPTY}
  ${first} =     Get From List   ${params}  0
  ${optionsList} =  Catenate   ${optionsList}  ${first}
  ${end} =  Get Length  ${params}
  :FOR    ${index}   IN RANGE  1  ${end}
   \   ${option} =     Get From List   ${params}  ${index}
   \   ${optionsList} =  Catenate   SEPARATOR=,  ${optionsList}  ${option}  
  Log Many   ${optionsList}
  [Return]   ${optionsList}

Assign role   [Arguments]   ${cert}   ${groupName}   ${roleName}  ${vo}=${vo1}
  File Should Exist   ${certsDir}/${cert}.cert.pem
  Use admin certificate
  Execute and Check Success   voms-admin --vo ${vo} --host ${vo1_host} assign-role /${vo}/${groupName} ${roleName} ${certsDir}/${cert}.cert.pem 
  Stop using certificate

Dismiss role   [Arguments]   ${cert}   ${groupName}   ${roleName}  ${vo}=${vo1}
  File Should Exist   ${certsDir}/${cert}.cert.pem
  Use admin certificate
  Execute and Check Success   voms-admin --vo ${vo} --host ${vo1_host} dismiss-role /${vo}/${groupName} ${roleName} ${certsDir}/${cert}.cert.pem
  Stop using certificate       

Create attribute   [Arguments]   ${attributeName}  ${description}  ${unique}  ${vo}=${vo1}
  Use admin certificate
  Execute and Check Success  voms-admin --vo=${vo} --host ${vo1_host} create-attribute-class ${attributeName} ${description} ${unique}
  Stop using certificate

Create attribute and check failure   [Arguments]   ${attributeName}  ${description}  ${unique}  ${vo}=${vo1}
  Use admin certificate
  ${output}   Execute and Check Failure  voms-admin --vo=${vo} --host ${vo1_host} create-attribute-class ${attributeName} ${description} ${unique}
  Stop using certificate
  [Return]   ${output}

Get attributes list   [Arguments]   ${vo}=${vo1}  
  Use admin certificate
  ${output}   Execute and Check Success  voms-admin --vo=${vo} --host ${vo1_host} list-attribute-classes
  Stop using certificate
  [Return]   ${output}

Delete attribute   [Arguments]   ${attributeName}  ${vo}=${vo1}
  Use admin certificate
  ${output}   Execute and Check Success  voms-admin --vo=${vo} --host ${vo1_host} delete-attribute-class ${attributeName}
  Stop using certificate

List users   [Arguments]   ${extraOptions}=${EMPTY}  ${vo}=${vo1}
  Use admin certificate
  ${output}   Execute and Check Success   voms-admin ${extraOptions} --vo ${vo} --host ${vo1_host} list-users
  Stop using certificate
  [Return]   ${output}

List groups   [Arguments]   ${vo}=${vo1}
  Use admin certificate
  ${output}   Execute and Check Success   voms-admin --vo ${vo} --host ${vo1_host} list-groups
  Stop using certificate
  [Return]   ${output}

List roles   [Arguments]   ${vo}=${vo1}
  Use admin certificate
  ${output}   Execute and Check Success   voms-admin --vo ${vo} --host ${vo1_host} list-roles
  Stop using certificate
  [Return]   ${output}
