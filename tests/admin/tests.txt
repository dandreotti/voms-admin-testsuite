*** Settings ***
Resource   lib/vomsadminlib.txt


*** Keywords ***

Teardown for ACL test
  Delete group   test_group/test_subgroup
  Delete group   test_group


*** Test Cases ***

Check that adding a non existing user in non existing group fails
  ${output}  Add user to group and check failure  ${non_existent_user}  ${non_existent_group} 
  ${subject}  Get named certificate subject  ${non_existent_user}
  ${issuer}   Get named certificate issuer  ${non_existent_user}  
  Should contain  ${output}  User '${subject},${issuer}' not found in this vo

Check that adding a non existing user in an existing group fails
  ${output}  Add user to group and check failure  ${non_existent_user}  ${non_registered_group}
  ${subject}  Get named certificate subject  ${non_existent_user}
  ${issuer}   Get named certificate issuer  ${non_existent_user}
  Should contain  ${output}  User '${subject},${issuer}' not found in this vo

Check that adding a user to a group who is already a member of fails
  ${output}  Add user to group and check failure  ${existent_user}  ${registered_group}
  Should contain  ${output}  is already a member of group

Check that adding an existing user to a group who is not yet a member of works
  Add user to group  ${existent_user}  ${non_registered_group}
  [Teardown]  Remove user from group  ${existent_user}  ${non_registered_group}

Check that assigning a non existing role of non existing user in non existing group fails
  ${output}  Assign role and check failure   ${non_existent_user}  ${non_existent_group}  ${non_existent_role}
  ${subject}  Get named certificate subject  ${non_existent_user}
  ${issuer}   Get named certificate issuer  ${non_existent_user}
  Should contain  ${output}  User '${subject},${issuer}' not found in database

Check that assigning an existent role in a non existent group for an existent user fails
  ${output}  Assign role and check failure   ${existent_user}  ${non_existent_group}  ${non_assigned_role}
  Should Match Regexp  ${output}  .+ Group '.*${non_existent_group}' not found in database

Check that assigning role in a group for a non existent user fails
  ${output}  Assign role and check failure   ${non_existent_user}    ${non_registered_group}  ${non_assigned_role}
  Should Match Regexp  ${output}  .+ User '.+${non_existent_user}.+' not found in database

Check that assigning a role in a group for a user who doesn't have that role works
  Assign role   ${existent_user}  ${registered_group}  ${non_assigned_role}
  [Teardown]  Dismiss role  ${existent_user}  ${registered_group}  ${non_assigned_role}
 
Check that setting ACL on non-existing group fails
  ${output}  Set ACL for group and check failure   ${existent_user}  ${non_existent_group}  ALL  FALSE
  Should Match Regexp  ${output}  .+ Group '.*${non_existent_group}' is not defined for this vo

Check that trying to set each permission for a user in an existing group context works
  :FOR    ${perm}   IN   @{ACL_perms}
  \    Set ACL permission for a user in a group  ${existent_user}  ${registered_group}  ${perm}  FALSE
  \    ${output}  Get ACL permission for a group   ${registered_group} 
  \    Should Match Regexp  ${output}  .+${existent_user}.+${perm}
  [Teardown]  Set ACL permission for a user in a group  ${existent_user}  ${registered_group}  ALL  FALSE

Check setting multiple permissions for an existing group/user context works
  ${multiple_perms}  Get comma separated list  @{ACL_perms}
  Set ACL permission for a user in a group  ${existent_user}  ${registered_group}  ${multiple_perms}  FALSE
  ${output}  Get ACL permission for a group   ${registered_group}
  Should Match Regexp  ${output}  .+${existent_user}.+${multiple_perms}
  [Teardown]  Set ACL permission for a user in a group  ${existent_user}  ${registered_group}  ALL  FALSE

Check setting an ACL entry in a group context for an unknown operation fails
  ${output}  Set ACL for group and check failure   ${existent_user}  ${registered_group}  FAKE_OP  FALSE
  Log  ${output}
  Should Match Regexp  ${output}  ValueError: FAKE_OP is not a supported VOMSPermission

Check setting permissions on non-existing role fails
  ${output}  Set ACL for a role and check failure  ${existent_user}  ${non_existent_role}  ALL  FALSE
  Log  ${output}
  Should Contain  ${output}  Role '${non_existent_role}' is not defined for this vo

Check that trying to set each permission for a valid group/role context works
  :FOR    ${perm}   IN   @{ACL_perms}
  \    Set ACL permission for a user in a group with role  ${existent_user}  ${registered_group}  ${non_assigned_role}  ${perm}  FALSE
  \    ${output}  Get ACL permission for a group with role  ${registered_group}  ${non_assigned_role}
  \    Should Match Regexp  ${output}  .+${existent_user}.+${perm}
  [Teardown]  Set ACL permission for a user in a group  ${existent_user}  ${registered_group}  ALL  FALSE

Check setting multiple permissions for a valid group/role context works
  ${multiple_perms}  Get comma separated list  @{ACL_perms}
  Set ACL permission for a user in a group with role  ${existent_user}  ${registered_group}  ${non_assigned_role}  ${multiple_perms}  FALSE
  ${output}  Get ACL permission for a group with role  ${registered_group}  ${non_assigned_role}
  Should Match Regexp  ${output}  .+${existent_user}.+${multiple_perms}
  [Teardown]  Set ACL permission for a user in a group  ${existent_user}  ${registered_group}  ALL  FALSE

Check setting an ACL entry in a group/role context for an unknown operation fails
  ${output}  Set ACL for a group with role and check failure  ${existent_user}  ${registered_group}  ${non_assigned_role}  FAKE_OP  FALSE  
  Should Match Regexp  ${output}  ValueError: FAKE_OP is not a supported VOMSPermission

Check creating a new attribute works
  Create attribute   TESTATTR  TESTDESC  0
  ${output}  Get attributes list
  Should Match Regexp  ${output}  TESTATTR
  Should Match Regexp  ${output}  TESTDESC
  [Teardown]  Delete Attribute  TESTATTR 

Check creating an already existent attribute fails
  Create attribute   TESTATTR  TESTDESC  0
  ${output}  Create attribute and check failure  TESTATTR  TESTDESC  0
  Should Contain  ${output}  Attribute "TESTATTR" already defined in database
  [Teardown]  Delete Attribute  TESTATTR

Check user credentials are shown when verbosity option is set
  ${output}  List users  --verbose
  Should Contain  ${output}  using
  Should Contain  ${output}  Subject:

Check adding default ACE for non-existing group fails
  ${output}  Set default ACL for group and check failure   ${existent_user}  ${non_existent_group}  ALL
  Should Contain  ${output}  Group  not found in database!

Check adding default ACE for a new created group works and is propagated to its child
  Create group   test_group
  Set default ACL for group   ${existent_user}  test_group  ALL
  ${output}  Get default ACL permission for a group  test_group
  ${subject}  Get named certificate subject  ${existent_user}
  ${issuer}   Get named certificate issuer  ${existent_user}
  Should contain  ${output}  (${subject},${issuer}): ALL
  Create group   test_group/test_subgroup
  ${output}  Get default ACL permission for a group  test_group/test_subgroup
  Log  ${output}
  [Teardown]  Teardown for ACL test

Check setting default ACL for a group with different permissions works
  Create group   test_group
  ${subject}  Get named certificate subject  ${existent_user}
  ${issuer}   Get named certificate issuer  ${existent_user}
  :FOR    ${perm}   IN   @{ACL_perms}
  \    Set default ACL for group  ${existent_user}  test_group  ${perm}
  \    ${output}  Get default ACL permission for a group   test_group
  \    Should contain  ${output}  (${subject},${issuer}): ${perm}
  [Teardown]  Delete group  test_group

Check setting default ACL for a group with multiple permissions at once works
  Create group   test_group
  ${subject}  Get named certificate subject  ${existent_user}
  ${issuer}   Get named certificate issuer  ${existent_user}
  ${multiple_perms}  Get comma separated list  @{ACL_perms}
  Set default ACL for group  ${existent_user}  test_group  ${multiple_perms}
  ${output}  Get default ACL permission for a group   test_group 
  Should contain  ${output}  (${subject},${issuer}):${multiple_perms}
  [Teardown]  Delete group  test_group

Check creating a new group works
  Create group   ${non_existent_group}
  ${output}  List groups
  Should contain  ${output}  ${non_existent_group}
  [Teardown]  Delete group  ${non_existent_group}

Check creating a already existent group fails
  Create group   ${non_existent_group}
  ${output}  Create group and check failure  ${non_existent_group}
  Should Match Regexp  ${output}  .+Group ".+${non_existent_group}" already defined! 
  [Teardown]  Delete group  ${non_existent_group}

Check creating a new role works
  Create role   ${non_existent_role}
  ${output}  List roles
  Should contain  ${output}  ${non_existent_role}
  [Teardown]  Delete role  ${non_existent_role}

Check creating a already existent role fails
  Create role  ${non_existent_role}
  ${output}   Create role and check failure  ${non_existent_role}
  Should contain  ${output}  Role "${non_existent_role}" already defined in database!
  Log  ${output}
  [Teardown]  Delete role  ${non_existent_role}
